#!/usr/bin/env python3


import argparse
import os

from djai.util.cli import run_command_with_config_file


PARSER = \
    argparse.ArgumentParser(
        prog=None,
            # The name of the program (default: sys.argv[0])
        usage=None,
            # The string describing the program usage
            # (default: generated from arguments added to parser)
        description='%(prog)s: Human-First AI Django CLI >>>',
            # Text to display before the argument help (default: none)
        epilog='^^^ %(prog)s: Human-First AI Django CLI\n',
            # Text to display after the argument help (default: none)
        parents=[],
            # A list of ArgumentParser objects
            # whose arguments should also be included
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            # A class for customizing the help output
        prefix_chars='-',
            # The set of characters that prefix optional arguments
            # (default: '-')
        fromfile_prefix_chars='@',
            # The set of characters that prefix files
            # from which additional arguments should be read (default: None)
        argument_default=None,
            # The global default value for arguments (default: None)
        conflict_handler='error',
            # The strategy for resolving conflicting optionals
            # (usually unnecessary)
            # (other choice: 'resolve')
        add_help=True,
            # Add a -h/--help option to the parser (default: True)
        allow_abbrev=True
            # Allows long options to be abbreviated
            # if the abbreviation is unambiguous. (default: True)
    )

# Command
PARSER.add_argument(
    'command',
        # name or flags - Either a name or a list of option strings,
        # e.g. foo or -f, --foo.
    action='store',
        # The basic type of action to be taken
        # when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false',
        # 'append'/'append_const', 'count', 'help', 'version'
    nargs=None,
        # The number of command-line arguments that should be consumed.
    const=None,
        # A constant value required by some action and nargs selections.
    default=argparse.SUPPRESS,
        # The value produced if the argument is absent from the command line.
    type=str,
        # The type to which the command-line argument should be converted.
    choices=None,
        # A container of the allowable values for the argument.
    # required=True,
        # Whether or not the command-line option may be omitted
        # (optionals only).
    help='Command to Run',
        # A brief description of what the argument does.
    metavar='COMMAND',
        # A name for the argument in usage messages.
    # dest=None
        # The name of the attribute to be added to the object
        # returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)

# Path to H1st Django Config File
PARSER.add_argument(
    'djai_config_file_path',
        # name or flags - Either a name or a list of option strings,
        # e.g. foo or -f, --foo.
    action='store',
        # The basic type of action to be taken
        # when this argument is encountered at the command line.
        # choices: 'store', 'store_const'/'store_true'/'store_false',
        # 'append'/'append_const', 'count', 'help', 'version'
    nargs='?',
        # The number of command-line arguments that should be consumed.
    const=None,
        # A constant value required by some action and nargs selections.
    default=None,
        # The value produced if the argument is absent from the command line.
    type=str,
        # The type to which the command-line argument should be converted.
    choices=None,
        # A container of the allowable values for the argument.
    # required=True,
        # Whether or not the command-line option may be omitted
        # (optionals only).
    help='Path to DjAI Config File',
        # A brief description of what the argument does.
    metavar='DJAI_CONFIG_FILE_PATH',
        # A name for the argument in usage messages.
    # dest=None
        # The name of the attribute to be added to the object
        # returned by parse_args().
        # *** DISABLED: ValueError: dest supplied twice for positional argument
)


args, extra_args = PARSER.parse_known_intermixed_args()

if args.command in ('init', 'deploy'):
    os.system(
        f'djai-aws {args.command} {args.djai_config_file_path} '
        f"{' '.join(extra_args)}")

else:
    run_command_with_config_file(
        command=f'python3 -m django {args.command} --settings settings '
                f"{' '.join(extra_args)}",
        djai_config_file_path=args.djai_config_file_path)
